<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>熵值法</title>
      <link href="/2020/08/30/shang-zhi-fa-ji-suan-bu-zou/"/>
      <url>/2020/08/30/shang-zhi-fa-ji-suan-bu-zou/</url>
      
        <content type="html"><![CDATA[<h3 id="熵值法"><a href="#熵值法" class="headerlink" title="熵值法"></a>熵值法</h3><h4 id="一、基本原理"><a href="#一、基本原理" class="headerlink" title="一、基本原理"></a>一、基本原理</h4><p>在信息论中，熵是对不确定性的一种度量。不确定性越大，熵就越大，包含的信息量越大；不确定性越小，熵就越小，包含的信息量就越小。</p><p>根据熵的特性，可以通过计算熵值来判断一个事件的随机性及无序程度，也可以用熵值来判断某个指标的离散程度，指标的离散程度越大，该指标对综合评价的影响(权重）越大。比如样本数据在某指标下取值都相等，则该指标对总体评价的影响为0，权值为0.</p><p>熵权法是一种客观赋权法，因为它仅依赖于数据本身的离散性。</p><h4 id="二、计算步骤"><a href="#二、计算步骤" class="headerlink" title="二、计算步骤"></a>二、计算步骤</h4><ol><li><p>选取数据<br> 选取$m$个指标，共$n$个样本，则$X_{ij}$为第$i$个样本的第$j$个指标的数值，$i=1,2,3,…n;j=1,2,3…m.$</p></li><li><p>数据标准化处理<br> 各项指标的计量单位以及方向不统一的情况下，需要对对数据进行标准化，为了避免求熵值时对数无意义，可以为每个$0$值加上较小数量级的实数，如$0.01$.<br> （1）对于正向指标(越大越好的指标)<br> $$<br> X^{‘}=\frac{X_{ij}- Min(X_{ij})}{Max(X_{ij})-Min(X_{ij})}<br> $$<br> （2）对于负向指标(越小越好的指标)<br> $$<br> X^{‘}=\frac{Max(X_{ij})-X_{ij}}{Max(X_{ij})-Min(X_{ij})}<br> $$</p></li></ol><ol start="3"><li>计算第$j$项指标下第$i$个样本占该指标的比重<br> 计算样本权重：<br>$$<br>P_{ij}=\frac{X_{ij}}{\sum_{i=1}^{n}X_{ij}}<br>$$</li></ol><ol start="4"><li><p>计算第$j$项指标的熵值<br> 计算指标熵值：<br>$$<br>e_j=-K*\sum_{i=1}^{n}(P_{ij}*ln(P_{ij})) \<br>K=\frac{1}{ln(n)}，其中n为样本个数。<br>$$</p></li><li><p>计算第$j$项指标的差异系数<br> 某项指标的信息效用值取决于该指标的信息熵$e_j$与$1$之间的差值，它的值直接影响权重的大小。信息效用值越大，对评价的重要性就越大，权重也就越大。<br>$$<br>d_j=1-e_j<br>$$</p></li></ol><ol start="6"><li>计算评价指标权重<br> 利用熵值法估算各指标的权重，其本质是利用该指标信息的差异系数来计算，其差异系数越高，对评价的重要性就越大（或称权重越大，对评价结果的贡献就越大）<br> 第$j$项指标的权重：<br>$$<br>w_j=\frac{d_j}{\sum_{j=1}^md_j}<br>$$</li></ol><ol start="7"><li>计算各样本综合得分<br> $$<br> z_i=\sum_{j=1}^mw_jx_{ij}<br> $$<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 读取数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"./temp.xlsx"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2020063019235262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQyNTc4NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 正向指标标准化处理</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cured_rate"</span><span class="token punctuation">,</span> <span class="token string">"StringencyIndex"</span><span class="token punctuation">,</span> <span class="token string">"GovernmentResponseIndex"</span><span class="token punctuation">,</span> <span class="token string">"ContainmentHealthIndex"</span><span class="token punctuation">,</span>    <span class="token string">"EconomicSupportIndex"</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cured_rate"</span><span class="token punctuation">,</span> <span class="token string">"StringencyIndex"</span><span class="token punctuation">,</span> <span class="token string">"GovernmentResponseIndex"</span><span class="token punctuation">,</span> <span class="token string">"ContainmentHealthIndex"</span><span class="token punctuation">,</span>    <span class="token string">"EconomicSupportIndex"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cured_rate"</span><span class="token punctuation">,</span> <span class="token string">"StringencyIndex"</span><span class="token punctuation">,</span> <span class="token string">"GovernmentResponseIndex"</span><span class="token punctuation">,</span> <span class="token string">"ContainmentHealthIndex"</span><span class="token punctuation">,</span>    <span class="token string">"EconomicSupportIndex"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cured_rate"</span><span class="token punctuation">,</span> <span class="token string">"StringencyIndex"</span><span class="token punctuation">,</span> <span class="token string">"GovernmentResponseIndex"</span><span class="token punctuation">,</span> <span class="token string">"ContainmentHealthIndex"</span><span class="token punctuation">,</span>    <span class="token string">"EconomicSupportIndex"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cured_rate"</span><span class="token punctuation">,</span> <span class="token string">"StringencyIndex"</span><span class="token punctuation">,</span> <span class="token string">"GovernmentResponseIndex"</span><span class="token punctuation">,</span> <span class="token string">"ContainmentHealthIndex"</span><span class="token punctuation">,</span><span class="token string">"EconomicSupportIndex"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反向指标标准化处理</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"confirmed"</span><span class="token punctuation">,</span><span class="token string">"confirmed_rate"</span><span class="token punctuation">,</span><span class="token string">"dead_rate"</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"confirmed"</span><span class="token punctuation">,</span><span class="token string">"confirmed_rate"</span><span class="token punctuation">,</span><span class="token string">"dead_rate"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"confirmed"</span><span class="token punctuation">,</span><span class="token string">"confirmed_rate"</span><span class="token punctuation">,</span><span class="token string">"dead_rate"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"confirmed"</span><span class="token punctuation">,</span><span class="token string">"confirmed_rate"</span><span class="token punctuation">,</span><span class="token string">"dead_rate"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"confirmed"</span><span class="token punctuation">,</span><span class="token string">"confirmed_rate"</span><span class="token punctuation">,</span><span class="token string">"dead_rate"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算样本权重,data为标准化后的数据</span>p <span class="token operator">=</span> data<span class="token operator">/</span>data<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算指标熵值</span>K <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token operator">-</span>K<span class="token operator">*</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>p<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算差异系数</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span>e<span class="token comment" spellcheck="true"># 计算指标权重</span>w <span class="token operator">=</span> d<span class="token operator">/</span>d<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算综合得分</span>score <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Faker库的使用方法</title>
      <link href="/2020/08/29/faker-ku-shi-yong-fang-fa/"/>
      <url>/2020/08/29/faker-ku-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Faker库使用方法"><a href="#Faker库使用方法" class="headerlink" title="Faker库使用方法"></a>Faker库使用方法</h1><p>[TOC]</p><p>我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 <code>Faker</code> 来伪造数据从而用来测试.</p><p><a href="https://link.jianshu.com/?t=https://github.com/joke2k/faker"><strong>Faker</strong></a> 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Faker库已经被提交到 <a href="https://link.jianshu.com/?t=https://pypi.python.org/pypi/Faker"><strong>pip</strong></a>，可以通过 pip 工具直接安装。</p><pre class=" language-python"><code class="language-python">pip install Faker</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://faker.readthedocs.io/en/master/"><strong>官方文档</strong></a></p><p>faker 提供了一个工厂函数，用来创建数据。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> faker <span class="token keyword">import</span> Factory<span class="token operator">>></span><span class="token operator">></span> fake1 <span class="token operator">=</span> Factory<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当然，也提供一个Faker类来创建实例</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token operator">>></span><span class="token operator">></span> fake2 <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake2<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Audrey Robinson'</span><span class="token operator">>></span><span class="token operator">></span> fake2<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'4266 Fritz Shore\nLewischester, AL 24594-7593'</span><span class="token operator">>></span><span class="token operator">></span> fake2<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Odio porro unde sint aliquid beatae. Ex officiis porro nostrum laboriosam deleniti nisi. A aut molestiae ratione ipsam perspiciatis facere.\nDicta incidunt at deleniti recusandae accusamus quisquam.'</span></code></pre><p>每次调用方法 <code>fake.name()</code> 都会产生不同的（随机）结果。这是因为 faker 向 <code>faker.Generator.method_name()</code> 调用了 <code>faker.Generator.format(method_name)</code>。</p><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>在用 <code>Faker()</code> 创建 faker 实例时，可以为实例指定本地化区域参数，默认为 ‘’n_US‘’因此生成的姓名、地址等都是美国的。<br>要生成中文伪造数据，只需：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token string">"zh_CN"</span><span class="token punctuation">)</span></code></pre><h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><p>如上面例子，每次调用 fake 实例的 <code>name()</code>方法时，都会产生不同随机姓名。fake 实例还有很多方法可用，这些方法分为以下几类：</p><ul><li>address 地址</li><li>person 人物类：性别、姓名等</li><li>barcode 条码类</li><li>color 颜色类</li><li>company 公司类：公司名、公司email、公司名前缀等</li><li>credit_card 银行卡类：卡号、有效期、类型等</li><li>currency 货币</li><li>date_time 时间日期类：日期、年、月等</li><li>file 文件类：文件名、文件类型、文件扩展名等</li><li>internet 互联网类</li><li>job 工作</li><li>lorem 乱数假文</li><li>misc 杂项类</li><li>phone_number 手机号码类：手机号、运营商号段</li><li>python python数据</li><li>profile 人物描述信息：姓名、性别、地址、公司等</li><li>ssn 社会安全码(身份证号码)</li><li>user_agent 用户代理</li></ul><h3 id="address-地址"><a href="#address-地址" class="headerlink" title="address 地址"></a>address 地址</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>country<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 国家</span><span class="token string">'奥地利'</span> <span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>city<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 城市</span><span class="token string">'郑州市'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>city_suffix<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 城市的后缀,中文是：市或县'市'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 地址</span><span class="token string">'河北省巢湖县怀柔南宁路f座 169812'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>street_address<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 街道</span><span class="token string">'邯郸路W座'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>street_name<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 街道名</span><span class="token string">'合肥路'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>postcode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 邮编</span><span class="token string">'314548'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>latitude<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 维度</span>Decimal<span class="token punctuation">(</span><span class="token string">'68.0228435'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>longitude<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 经度</span>Decimal<span class="token punctuation">(</span><span class="token string">'155.964341'</span><span class="token punctuation">)</span></code></pre><h3 id="person-人物"><a href="#person-人物" class="headerlink" title="person 人物"></a>person 人物</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 姓名</span><span class="token string">'单玉珍'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>last_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 姓</span><span class="token string">'潘'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>first_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 名</span><span class="token string">'琴'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name_male<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 男性姓名</span><span class="token string">'官平'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>last_name_male<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 男性姓</span><span class="token string">'安'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>first_name_male<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 男性名</span><span class="token string">'文'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name_female<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 女性姓名</span><span class="token string">'许颖'</span></code></pre><h3 id="barcode-条码"><a href="#barcode-条码" class="headerlink" title="barcode 条码"></a>barcode 条码</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ean8<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8位条码</span><span class="token string">'12771363'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ean13<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 13位条码</span><span class="token string">'9133134950963'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ean<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 自定义位数条码,只能选8或者13</span><span class="token string">'20417161'</span></code></pre><h3 id="color-颜色"><a href="#color-颜色" class="headerlink" title="color  颜色"></a>color  颜色</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>hex_color<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 16进制表示的颜色</span><span class="token string">'#671f6d'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>rgb_css_color<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># css用的rgb色</span><span class="token string">'rgb(237,74,237)'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>rgb_color<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示rgb色的字符串</span><span class="token string">'208,102,218'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>color_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 颜色名字</span><span class="token string">'Brown'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>safe_hex_color<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#安全16进制色</span><span class="token string">'#ee4400'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>safe_color_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 安全颜色名字</span><span class="token string">'maroon'</span></code></pre><h3 id="company-公司"><a href="#company-公司" class="headerlink" title="company 公司"></a>company 公司</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>company<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 公司名</span><span class="token string">'时空盒数字科技有限公司'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>company_suffix<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 公司名后缀</span><span class="token string">'科技有限公司'</span></code></pre><h3 id="credit-card-银行信用卡"><a href="#credit-card-银行信用卡" class="headerlink" title="credit_card 银行信用卡"></a>credit_card 银行信用卡</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>credit_card_number<span class="token punctuation">(</span>card_type<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 卡号</span><span class="token string">'375325478746231'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>credit_card_provider<span class="token punctuation">(</span>card_type<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 卡的提供者</span><span class="token string">'VISA 13 digit'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>credit_card_security_code<span class="token punctuation">(</span>card_type<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 卡的安全密码</span><span class="token string">'450'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>credit_card_expire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 卡的有效期</span><span class="token string">'04/22'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>credit_card_full<span class="token punctuation">(</span>card_type<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 完整卡信息</span><span class="token string">'Maestro\n秀芳 商\n502001016117 04/27\nCVV: 144\n'</span></code></pre><h3 id="currency-货币"><a href="#currency-货币" class="headerlink" title="currency 货币"></a>currency 货币</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>currency_code<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 货币代码</span><span class="token string">'HNL'</span></code></pre><h3 id="date-time-时间日期"><a href="#date-time-时间日期" class="headerlink" title="date_time 时间日期"></a>date_time 时间日期</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机日期时间</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>iso8601<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 以iso8601标准输出的日期</span><span class="token string">'1973-11-16T22:58:37'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_this_month<span class="token punctuation">(</span>before_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> after_now<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 本月的某个日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_this_year<span class="token punctuation">(</span>before_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> after_now<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 本年的某个日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_this_decade<span class="token punctuation">(</span>before_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> after_now<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 本年代内的一个日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_this_century<span class="token punctuation">(</span>before_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> after_now<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 本世纪一个日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_between<span class="token punctuation">(</span>start_date<span class="token operator">=</span><span class="token string">"-30y"</span><span class="token punctuation">,</span> end_date<span class="token operator">=</span><span class="token string">"now"</span><span class="token punctuation">,</span> tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 两个时间间的一个随机时间</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 时区</span><span class="token string">'America/Guatemala'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>time<span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 时间（可自定义格式）</span><span class="token string">'11:21:52'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>am_pm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机上午下午</span><span class="token string">'PM'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机月份</span><span class="token string">'02'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>month_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机月份名字</span><span class="token string">'August'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>year<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机年</span><span class="token string">'1974'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>day_of_week<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机星期几</span><span class="token string">'Sunday'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>day_of_month<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机月中某一天</span><span class="token string">'02'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>time_delta<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机时间延迟</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">13371</span><span class="token punctuation">,</span> <span class="token number">27637</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_object<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机日期对象</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1983</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>time_object<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机时间对象</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>unix_time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机unix时间（时间戳）</span><span class="token number">1223246848</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date<span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机日期（可自定义格式）</span><span class="token string">'1984-04-20'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>date_time_ad<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 公元后随机日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">341</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span></code></pre><h3 id="file-文件"><a href="#file-文件" class="headerlink" title="file 文件"></a>file 文件</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>file_name<span class="token punctuation">(</span>category<span class="token operator">=</span><span class="token string">"image"</span><span class="token punctuation">,</span> extension<span class="token operator">=</span><span class="token string">"png"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 文件名（指定文件类型和后缀名）</span><span class="token string">'增加.png'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>file_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机生成各类型文件</span><span class="token string">'提供.pdf'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>file_extension<span class="token punctuation">(</span>category<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 文件后缀</span><span class="token string">'txt'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>mime_type<span class="token punctuation">(</span>category<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mime-type</span><span class="token string">'image/png'</span></code></pre><h3 id="internet-互联网"><a href="#internet-互联网" class="headerlink" title="internet 互联网"></a>internet 互联网</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ipv4<span class="token punctuation">(</span>network<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ipv4地址</span><span class="token string">'104.225.105.10'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ipv6<span class="token punctuation">(</span>network<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ipv6地址</span><span class="token string">'dea6:ca11:39d0:b49f:fff1:82f1:bf88:698b'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>uri_path<span class="token punctuation">(</span>deep<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># uri路径</span><span class="token string">'search/categories'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>uri_extension<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># uri扩展名</span><span class="token string">'.htm'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>uri<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># uri</span><span class="token string">'https://www.wei.com/terms/'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>url<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># url</span><span class="token string">'http://zheng.org/'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>image_url<span class="token punctuation">(</span>width<span class="token operator">=</span>None<span class="token punctuation">,</span> height<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片url</span><span class="token string">'https://www.lorempixel.com/700/990'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>domain_word<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 域名主体</span><span class="token string">'hu'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>domain_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 域名</span><span class="token string">'hu.cn'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>tld<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 域名后缀</span><span class="token string">'com'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>user_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用户名</span><span class="token string">'xia13'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># UA</span><span class="token string">'Opera/8.33.(Windows NT 5.1; an-ES) Presto/2.9.171 Version/10.00'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>mac_address<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># MAC地址</span><span class="token string">'d6:38:cc:2a:76:b2'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>safe_email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 安全邮箱</span><span class="token string">'mingli@example.net'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>free_email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 免费邮箱</span><span class="token string">'tao44@gmail.com'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>company_email<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 公司邮箱</span><span class="token string">'jingzhong@wang.cn'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 邮箱</span><span class="token string">'changjun@hao.com'</span></code></pre><h3 id="job-工作"><a href="#job-工作" class="headerlink" title="job 工作"></a>job 工作</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#工作职位</span><span class="token string">'Dealer'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>job<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Musician'</span></code></pre><h3 id="lorem-乱数假文"><a href="#lorem-乱数假文" class="headerlink" title="lorem 乱数假文"></a>lorem 乱数假文</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>text<span class="token punctuation">(</span>max_nb_chars<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机生成一篇文章</span><span class="token string">'语言无法应用为什一点国内.要求完成如何世界电脑发布作品.经济不同教育个人科技全国.\n在线学生发布信息上海状态.\n联系一次通过其实介绍世界.增加也是使用成功那个.\n商品免费管理公司.留言自己这种内容.\n次数内容知道这样女人感觉.操作他的生产出现如何报告文章只有.\n个人文化中心不能发布最新.质量一下提高.感觉最大工具表示最后计划.这是还有次数结果其实特别.'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>word<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机单词</span><span class="token string">'能力'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>words<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成几个字</span><span class="token punctuation">[</span><span class="token string">'国家'</span><span class="token punctuation">,</span> <span class="token string">'经营'</span><span class="token punctuation">,</span> <span class="token string">'结果'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>sentence<span class="token punctuation">(</span>nb_words<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> variable_nb_words<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成一个句子</span><span class="token string">'重要更多我们作品地方增加.'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>sentences<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机生成几个句子</span><span class="token punctuation">[</span><span class="token string">'制作上海学生.'</span><span class="token punctuation">,</span> <span class="token string">'方式汽车一样技术帮助欢迎.'</span><span class="token punctuation">,</span> <span class="token string">'说明一种深圳经营电话帖子.'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>paragraph<span class="token punctuation">(</span>nb_sentences<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> variable_nb_sentences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成一段文字(字符串)</span><span class="token string">'非常环境位置有限发展首页行业.情况对于出现部门这种觉得.产品以后因为虽然由于日本不同.'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>paragraphs<span class="token punctuation">(</span>nb<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成成几段文字(列表)</span><span class="token punctuation">[</span><span class="token string">'就是发布要求有关这里国际.美国设备深圳经营.首页也是支持报告.'</span><span class="token punctuation">,</span> <span class="token string">'决定可是只有发现开始一直.最后有些项目正在深圳关系决定.下载注册图片更多进行他的那些.'</span><span class="token punctuation">,</span> <span class="token string">'必须他们发生数据准备联系.同时这样内容学校精华.'</span><span class="token punctuation">]</span></code></pre><h3 id="misc-杂项"><a href="#misc-杂项" class="headerlink" title="misc 杂项"></a>misc 杂项</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>binary<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机二进制字符串(可指定长度)</span>b<span class="token string">'U\xa9@\x1e\x96\xe7\xca\x82\x14f'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>language_code<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机语言代码</span><span class="token string">'tg'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>raw_output<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机md5，16进制字符串</span><span class="token string">'cc4feebe419791332bbcff5e0fdf084a'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>raw_output<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机sha1，16进制字符串</span><span class="token string">'8ac0e9980f880860b6e45ae6fd257cc847b7ae8d'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>raw_output<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机sha256，16进制字符串</span><span class="token string">'033151f173f4a389e38e7df2363d89741f752c474e7bdfa2ee0a794bf0b505b5'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>boolean<span class="token punctuation">(</span>chance_of_getting_true<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机真假值(得到True的几率是50%)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>null_boolean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机真假值和null</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>null_boolean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>password<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> special_chars<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> digits<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> upper_case<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> lower_case<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机密码（可指定密码策略）</span><span class="token string">'F%722TJg_U'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>locale<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机本地代码</span><span class="token string">'hy_AM'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机uuid</span><span class="token string">'a50d17e7-bc4f-37a3-27b3-04a24fdd0055'</span><span class="token operator">>></span><span class="token operator">></span></code></pre><h3 id="phone-number-电话号码"><a href="#phone-number-电话号码" class="headerlink" title="phone_number 电话号码"></a>phone_number 电话号码</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>phone_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 手机号码</span><span class="token string">'13334603608'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>phonenumber_prefix<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 运营商号段，手机号码前三位</span><span class="token number">158</span></code></pre><h3 id="python-python数据"><a href="#python-python数据" class="headerlink" title="python python数据"></a>python python数据</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pyint<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机int</span><span class="token number">7775</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pyfloat<span class="token punctuation">(</span>left_digits<span class="token operator">=</span>None<span class="token punctuation">,</span> right_digits<span class="token operator">=</span>None<span class="token punctuation">,</span> positive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浮点数</span><span class="token operator">-</span><span class="token number">84901.5586333</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pydecimal<span class="token punctuation">(</span>left_digits<span class="token operator">=</span>None<span class="token punctuation">,</span> right_digits<span class="token operator">=</span>None<span class="token punctuation">,</span> positive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机高精度数</span>Decimal<span class="token punctuation">(</span><span class="token string">'-12273687068527.0'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pystr<span class="token punctuation">(</span>min_chars<span class="token operator">=</span>None<span class="token punctuation">,</span> max_chars<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机字符串（可指定长度）</span><span class="token string">'cblutNKFIyegfcHPrjzx'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pybool<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机bool值</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pyiterable<span class="token punctuation">(</span>nb_elements<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> variable_nb_elements<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机iterable</span><span class="token punctuation">[</span><span class="token string">'ODfeVvcbAjPDBGwzljQw'</span><span class="token punctuation">,</span> <span class="token string">'https://www.tan.cn/list/category/homepage.php'</span><span class="token punctuation">,</span> <span class="token string">'YQlrsFkBieyKYaXlCljJ'</span><span class="token punctuation">,</span> Decimal<span class="token punctuation">(</span><span class="token string">'42778240911787.2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Decimal<span class="token punctuation">(</span><span class="token string">'957411812.6383'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'TGbqZufoiUXLQTZDrVcP'</span><span class="token punctuation">,</span> <span class="token string">'http://yan.com/posts/tags/search/terms.php'</span><span class="token punctuation">,</span> <span class="token number">3.680492634254</span><span class="token punctuation">,</span> <span class="token string">'min57@hotmail.com'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'xMMOjlETIgKGqVGTrChG'</span><span class="token punctuation">,</span> <span class="token string">'yong83@xu.cn'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pylist<span class="token punctuation">(</span>nb_elements<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> variable_nb_elements<span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成一个list</span><span class="token punctuation">[</span><span class="token string">'KXQMXAkcEMSLfnIZkgJb'</span><span class="token punctuation">,</span> <span class="token string">'BtowiRsuIqyyULnSYYdr'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'juan47@hotmail.com'</span><span class="token punctuation">,</span> <span class="token string">'QEsdUpEqHLpThyWCjkNx'</span><span class="token punctuation">,</span> Decimal<span class="token punctuation">(</span><span class="token string">'-801375867.9'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'ucDyeZnHAXfZtkwdVUbR'</span><span class="token punctuation">,</span> <span class="token number">4707</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">1974</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pydict<span class="token punctuation">(</span>nb_elements<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> variable_nb_elements<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机字典</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'其中': 9047, '一直': 'AUiUjuqccIdVAWSqzDbW', '选择': 'ddong@hotmail.com', '开发': datetime.datetime(1972, 10, 20, 14, 14, 9), '电影': 'KYmolBhkjSRxloXXFUUT', '文化': 2681, '这里': 'uyang@yahoo.com', '不会': 'ZPkwuxWsrJSHMNuFiWEx', '社会': 'CiujeaZMZSuyYwuKzEdN'&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pyset<span class="token punctuation">(</span>nb_elements<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> variable_nb_elements<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机set</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'bhe@hotmail.com', 'http://fu.cn/list/home.htm', 'MlJluVirRkofBnKNtphM', 296, 'ghoUSHkuEGmCzlJFKyHZ', datetime.datetime(2008, 4, 4, 2, 55, 4), 'AgbynHjdvwYpUkbMsfqr', 8751, 9649, 'tangguiying@hotmail.com', Decimal('5727570036.91'), 'HmDkExndcQIOaTtsSpsc', 'hjQlLLXuHVVzENEwoHJK'&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pytuple<span class="token punctuation">(</span>nb_elements<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> variable_nb_elements<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机tuple</span><span class="token punctuation">(</span><span class="token string">'http://www.cai.com/index/'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">1973</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'khltJQMYJvIDRMYodviZ'</span><span class="token punctuation">,</span> <span class="token string">'uJezUsEqiHaiFxwOPWvl'</span><span class="token punctuation">,</span> <span class="token string">'qojwZHyytBSQQavkDaTu'</span><span class="token punctuation">,</span> <span class="token string">'AHUCHYuVJTHnoSEuQDSY'</span><span class="token punctuation">,</span> <span class="token number">1012</span><span class="token punctuation">,</span> <span class="token string">'uEYVuzeTlgVhrnCATfKw'</span><span class="token punctuation">,</span> <span class="token string">'https://www.zhou.com/categories/tags/main/'</span><span class="token punctuation">,</span> <span class="token string">'LbLSFZPeATtzHvbmYhGr'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>pystruct<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机生成3个有10个元素的python数据结构</span><span class="token punctuation">(</span><span class="token punctuation">[</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">1996</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'qianming@hotmail.com'</span><span class="token punctuation">,</span> <span class="token string">'yEWMrpTqtAHfbxqldGrb'</span><span class="token punctuation">,</span> <span class="token string">'YgKYOnrjuthOrOXhlYIl'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">1994</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Decimal<span class="token punctuation">(</span><span class="token string">'-6865068.3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'SYHFHiFvJlRVPcCKumUM'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8619.4354</span><span class="token punctuation">,</span> <span class="token string">'kwGipwcASeALLeKdaWBi'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'同时': 'BvtYdkNTHwZNMiIIRwKd', '空间': 310959668662.457, '特别': 'PZQDBuuQWkcdryMloyKS', '音乐': Decimal('-7219015925.0'), '项目': 'https://www.zhou.cn/main.php', '回复': 30.408750841, '显示': 'etZMrsjXJgZpDfZWhpoS', '大小': 7472, '类型': 'OsjpxgLqnTcdVOlHoMoP', '什么': 'http://www.xia.com/posts/app/index/'&amp;#125;, &amp;#123;'朋友': &amp;#123;0: -415025.243093017, 1: [1799, 585, 'shu@hotmail.com'], 2: &amp;#123;0: 9980, 1: 'qnOnFTzGnsjvXGybBnMF', 2: ['http://zheng.cn/list/search/tag/faq.html', Decimal('964285276661463.0')]&amp;#125;&amp;#125;, '发生': &amp;#123;1: -5339010.6134, 2: [datetime.datetime(1987, 6, 23, 15, 21, 45), 'SvSpvKqTXlJvdQhHScwM', 'PZjKOYzZzoNVsHLRcARQ'], 3: &amp;#123;1: 'https://www.yan.cn/register/', 2: 2191, 3: ['HMHKQuLRBQaaAypRbtHU', datetime.datetime(2014, 5, 24, 3, 32, 36)]&amp;#125;&amp;#125;, '我的': &amp;#123;2: 'linxia@yahoo.com', 3: ['http://gu.com/about.php', 'DhzpWYkgLCobGSHDLXzI', 1420], 4: &amp;#123;2: datetime.datetime(1986, 2, 22, 4, 50, 12), 3: 'rRHwQQzkpAMBQxwVITBa', 4: [datetime.datetime(1984, 2, 6, 11, 52, 18), -73821572962388.7]&amp;#125;&amp;#125;, '全部': &amp;#123;3: 'uMQeeBXYNGhrHnAerdjp', 4: [323329.56403, 'kFvqXFhhtQPNtrOjKtxa', 'http://peng.cn/'], 5: &amp;#123;3: 'lcaoeisYIAOsuRjbOXia', 4: Decimal('-902407032449085.0'), 5: [2296, 'uyuWgnsONzLluXqXdASM']&amp;#125;&amp;#125;, '大小': &amp;#123;4: 'min63@hotmail.com', 5: [datetime.datetime(1991, 10, 22, 19, 21, 48), 'cDYEScdIokWuvGhRkWqs', 'XeDJojWyywFvzmWYaokO'], 6: &amp;#123;4: Decimal('-4167029.2915827'), 5: 4030, 6: [6372, 'xfRXXEFGsNQpeIGmbaHU']&amp;#125;&amp;#125;, '语言': &amp;#123;5: 'https://www.guo.cn/', 6: [6498, datetime.datetime(1981, 12, 3, 18, 4, 29), 42598100345.61], 7: &amp;#123;5: 'http://zheng.cn/', 6: -229316.268238, 7: ['https://www.qiao.cn/home/', 'GtaEXeVxjRnnkggjEguv']&amp;#125;&amp;#125;, '表示': &amp;#123;6: 'xcBvcGUWxdMhDqgzmhSd', 7: ['kwDaFhyTKqHajGSaNOMf', 8561, 5456], 8: &amp;#123;6: 'https://zhou.cn/tags/tag/faq.html', 7: 'IGayAZtTQVlSOasQwgug', 8: ['iCjwBzHfmPSLqAgmIOle', 70511766106574.5]&amp;#125;&amp;#125;, '电子': &amp;#123;7: 'http://www.lu.org/tags/posts/terms/', 8: [datetime.datetime(1978, 8, 11, 12, 16, 35), 'https://song.cn/main/categories/homepage.html', 'https://long.com/register.html'], 9: &amp;#123;7: 'nFJNhyMYBvfTxrYwYPUQ', 8: -2252757903.0, 9: ['GuJnhMEgXoMAivrgGZie', datetime.datetime(2014, 5, 29, 1, 17, 50)]&amp;#125;&amp;#125;, '的人': &amp;#123;8: 'WgHePwYSPgSiPllXpLlJ', 9: [1782, 'fSepbXwpvhiBphzDTDNC', -9117731.63459416], 10: &amp;#123;8: 5602, 9: 3664, 10: ['http://www.mao.com/search/tag/main/', Decimal('5579.7377')]&amp;#125;&amp;#125;, '不过': &amp;#123;9: 'rOfkDPTHvzKbfvQHbPNm', 10: [314.397, 'StqeLyXkIDKHfExSjggk', 'xiuyingkang@gao.cn'], 11: &amp;#123;9: 'BLKNdcccamYzBwRcMxlx', 10: 'yongduan@gong.org', 11: ['ZocoQHdbhaNloWALnzwt', 'eWVvvHurAlZZRxlYHZXi']&amp;#125;&amp;#125;&amp;#125;)</span></code></pre><h3 id="profile-人物描述信息"><a href="#profile-人物描述信息" class="headerlink" title="profile 人物描述信息"></a>profile 人物描述信息</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>profile<span class="token punctuation">(</span>fields<span class="token operator">=</span>None<span class="token punctuation">,</span> sex<span class="token operator">=</span>None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 人物描述信息：姓名、性别、地址、公司等</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'job': 'Licensed conveyancer', 'company': '万迅电脑信息有限公司', 'ssn': '370684199902182726', 'residence': '福建省小红市南长广州街K座 406448', 'current_location': (Decimal('18.050895'), Decimal('-0.877117')), 'blood_group': '0-', 'website': ['https://www.yi.org/', 'https://www.hu.com/', 'https://www.yin.cn/'], 'username': 'minghuang', 'name': '后英', 'sex': 'F', 'address': '安徽省秀荣市璧山嘉禾路T座 954960', 'mail': 'czhong@hotmail.com', 'birthdate': '1975-03-09'&amp;#125;</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> fake<span class="token punctuation">.</span>simple_profile<span class="token punctuation">(</span>sex<span class="token operator">=</span><span class="token string">"m"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 人物精简信息</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> s<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>username chao85name 邴宇sex Maddress 陕西省东市朝阳廖街Y座 <span class="token number">757661</span>mail xiazhang@gmail<span class="token punctuation">.</span>combirthdate <span class="token number">1996</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">20</span></code></pre><h3 id="ssn-社会安全码-身份证"><a href="#ssn-社会安全码-身份证" class="headerlink" title="ssn 社会安全码(身份证)"></a>ssn 社会安全码(身份证)</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>ssn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 随机生成身份证号(18位)</span><span class="token string">'140100196612297997'</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>fake<span class="token punctuation">.</span>ssn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">18</span></code></pre><h3 id="user-agent-用户代理"><a href="#user-agent-用户代理" class="headerlink" title="user_agent 用户代理"></a>user_agent 用户代理</h3><p>常用在伪造浏览器信息</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 伪造UA</span><span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5361 (KHTML, like Gecko) Chrome/15.0.812.0 Safari/5361'</span></code></pre><p>平台信息伪造</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>linux_platform_token<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'X11; Linux i686'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>linux_processor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'i686'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>windows_platform_token<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Windows CE'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>mac_platform_token<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Macintosh; Intel Mac OS X 10_7_4'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>mac_processor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'PPC'</span></code></pre><p>浏览器伪造</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>internet_explorer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># IE浏览器</span><span class="token string">'Mozilla/5.0 (compatible; MSIE 5.0; Windows NT 6.1; Trident/4.0)'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>opera<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># opera浏览器</span><span class="token string">'Opera/9.37.(Windows 95; doi-IN) Presto/2.9.178 Version/10.00'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>firefox<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># firefox浏览器</span><span class="token string">'Mozilla/5.0 (Windows NT 5.0; te-IN; rv:1.9.2.20) Gecko/2015-09-28 13:29:05 Firefox/12.0'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>safari<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># safari浏览器</span><span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 4.0) AppleWebKit/533.37.4 (KHTML, like Gecko) Version/5.0 Safari/533.37.4'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>chrome<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># chrome浏览器</span><span class="token string">'Mozilla/5.0 (Windows 98; Win 9x 4.90) AppleWebKit/5361 (KHTML, like Gecko) Chrome/14.0.866.0 Safari/5361'</span></code></pre><h2 id="自定义扩展"><a href="#自定义扩展" class="headerlink" title="自定义扩展"></a>自定义扩展</h2><p>Faker 已经提供了足够丰富的信息生成，包括名字、手机号、邮箱地址、邮编等等。尽管如此，可能还是没有办法满足你的需求。这时，可以利用自定义扩展，引用外部的 provider，自定义你要的功能。</p><p>Faker 对象可以通过 <code>add_provider</code> 方法将自定义的 Provider 添加到对象中,自定义的 Provider 需要继承自 BaseProvider。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> faker <span class="token keyword">import</span> Fakerfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># first, import a similar Provider or use the default one</span><span class="token keyword">from</span> faker<span class="token punctuation">.</span>providers <span class="token keyword">import</span> BaseProvider<span class="token comment" spellcheck="true"># create new provider class</span><span class="token keyword">class</span> <span class="token class-name">MyProvider</span><span class="token punctuation">(</span>BaseProvider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'bar'</span><span class="token comment" spellcheck="true"># then add new provider to faker instance</span>fake<span class="token punctuation">.</span>add_provider<span class="token punctuation">(</span>MyProvider<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># now you can use:</span><span class="token keyword">print</span><span class="token punctuation">(</span>fake<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果显示：</p><pre><code>bar</code></pre><h2 id="随机控制"><a href="#随机控制" class="headerlink" title="随机控制"></a>随机控制</h2><p><code>Faker</code> 随机生成由 <code>random.Random</code> 驱动。其中，<code>.random</code> 属性返回 <code>random.Random</code> 对象。通过对该对象的操作，可以实现自定义的行为。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> faker <span class="token keyword">import</span> Fakerfake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span>fake<span class="token punctuation">.</span>randomfake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>getstate<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>那么，可以实现什么自定义呢？举个例子，我们可以设置 <code>seed</code>，通过给定的 <code>seed</code> 可以控制每次生成的内容都是一样的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token operator">>></span><span class="token operator">></span> fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span>xxxxxxxxxx <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token operator">>></span><span class="token operator">></span> fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker<span class="token operator">>></span><span class="token operator">></span> fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span>fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">4321</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Ryan Gallagher'</span><span class="token operator">>></span><span class="token operator">></span> fake<span class="token punctuation">.</span>address<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span></code></pre><p>不同的两次运行，只要seed一样，生成出来的信息就是一样的。</p><p>注意：<code>fake.random.seed(4321)</code> 可以写成 <code>fake.seed(4321)</code> 。</p><h2 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h2><p>有时想在shell或者其他程序中生成一些伪数据，是不是一定要写一个Python脚本呢？别急——Faker提供了一个命令行工具，估计可以应对大部分场景了：</p><pre class=" language-python"><code class="language-python">$ faker address<span class="token number">968</span> Bahringer Garden Apt<span class="token punctuation">.</span> 722Kristinaland<span class="token punctuation">,</span> NJ <span class="token number">09890</span>$ python3 <span class="token operator">-</span>m faker address<span class="token number">432</span> Marvin Wells Apt<span class="token punctuation">.</span> <span class="token number">593</span>\nWest Eric<span class="token punctuation">,</span> DC <span class="token number">45650</span><span class="token operator">-</span><span class="token number">8420</span>$ faker <span class="token operator">-</span>l de_DE addressSamira<span class="token operator">-</span>Niemeier<span class="token operator">-</span>Allee <span class="token number">5694812</span> Biedenkopf$ faker profile<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'job': 'Designer, blown glass/stained glass', 'company': 'Dennis-Bowers', 'ssn': '034-28-9965', 'residence': '34796 Jeremiah Station Apt. 782\nWest Timothy, TX 24139-6974', 'current_location': (Decimal('-47.425017'), Decimal('-42.743615')), 'blood_group': '0+', 'website': ['https://www.gardner.biz/', 'http://glover-ellison.info/', 'http://www.harrison.biz/'], 'username': 'patrick33', 'name': 'Alexandra Montgomery', 'sex': 'F', 'address': '2314 Collier Stream Suite 093\nMcintyreside, UT 19553', 'mail': 'gomezterri@hotmail.com', 'birthdate': '2005-01-30'&amp;#125;</span>$ faker profile ssn<span class="token punctuation">,</span>name<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'ssn': '344-68-7420', 'name': 'Veronica Brennan'&amp;#125;</span>$ faker <span class="token operator">-</span>r<span class="token operator">=</span><span class="token number">3</span> <span class="token operator">-</span>s<span class="token operator">=</span><span class="token string">";"</span> nameWillam Kertzmann<span class="token punctuation">;</span>Josiah Maggio<span class="token punctuation">;</span>Gayla Schmitt<span class="token punctuation">;</span></code></pre><p>faker 命令帮助：</p><pre class=" language-python"><code class="language-python">faker <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>version<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>o output<span class="token punctuation">]</span>      <span class="token punctuation">[</span><span class="token operator">-</span>l <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;bg_BG,cs_CZ,...,zh_CN,zh_TW&amp;#125;]</span>      <span class="token punctuation">[</span><span class="token operator">-</span>r REPEAT<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>s SEP<span class="token punctuation">]</span>      <span class="token punctuation">[</span><span class="token operator">-</span>i <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;module.containing.custom_provider othermodule.containing.custom_provider&amp;#125;]</span>      <span class="token punctuation">[</span>fake<span class="token punctuation">]</span> <span class="token punctuation">[</span>fake argument <span class="token punctuation">[</span>fake argument <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>选项说明：</p><ul><li><code>faker</code> ： 在shell中，<code>faker</code> 命令也可以用 <code>python -m faker</code> 来代替</li><li><code>-h</code>，<code>--help</code> ： 帮助信息</li><li><code>--version</code> ：显示版本</li><li><code>-o FILENAM</code> ：输出结果到文件中</li><li><code>-l &#123;bg_BG,cs_CZ,...,zh_CN,zh_TW&#125;</code> ：指定本地化，<code>zh_CN</code> 表示中文</li><li><code>-r REPEAT</code> ：指定生成多少条相同类型的数据</li><li><code>-s SEP</code> ：在每个输出后边添加指定的分隔符</li><li><code>-i &#123;my.custom_provider other.custom_provider&#125;</code> ：自定义扩展，<code>prividers</code>列表。注意，这里要指定包含你 <code>provider</code> 类的模块的路径，而不是程序本身。</li><li><code>fake</code> ：指定方法名称，如：<code>name</code> , <code>address</code> , <code>text</code> 等</li><li><code>[fake argument ...]</code> ：为方法指定参数。如上例，为 <code>profile</code> 方法指定 <code>ssn</code> 和 <code>name</code> 参数，只输出这两个类型的内容。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/29/hello-world/"/>
      <url>/2020/08/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Excel函数</title>
      <link href="/2020/04/04/excel-han-shu/"/>
      <url>/2020/04/04/excel-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="函数的使用："><a href="#函数的使用：" class="headerlink" title="函数的使用："></a>函数的使用：</h4><hr><ol><li><strong>注意格式的正确性。</strong></li><li><strong>注意引用区域的正确性，引用区域错误会导致返回的结果出错或函数报错。</strong></li><li><strong>注意相对引用和绝对引用的使用。</strong></li></ol><hr><ol><li><p><code>=vlookup（查询值，查询区域，查询区域的列，0/1）</code></p><blockquote><p>说明：1为模糊匹配，0为精确匹配，省略时为模糊匹配。</p></blockquote></li><li><p><code>=match（匹配值，匹配区域, 0）</code></p><blockquote><p>说明：此函数以数值得形式返回匹配值所在位置，若匹配区域为某一列，则返回匹配值在此列的所在行数，若匹配区域为某一行，则返回匹配值在此列的所在列数。返回的行（列）位置为相对位置。</p></blockquote></li><li><p><code>=vlookup（查询值，查询区域，match（匹配值，匹配区域，0），0）</code></p><blockquote><p>说明：实现多条信息查询。</p></blockquote></li><li><p><code>=count（计数区域）</code></p><blockquote><p>说明：返回查询区域数值个数，若含有文字，文字部分则以0返回。</p></blockquote></li><li><p><code>=ifs（判断条件1，返回值1，判断条件2，返回值2，...）</code></p><blockquote><p>说明：多条件判断。</p></blockquote></li><li><p><code>=countif（计数区域，计数条件）</code></p><blockquote><p>说明：返回计数条件下的计数值。</p></blockquote></li><li><p><code>ALT + = </code></p><blockquote><p>说明：快速求和。</p></blockquote></li><li><p><code>=text（要转换的值，格式）</code></p><blockquote><p>说明：=text（a1，”yyyy年mm月dd日aaaa”或“e年mm月dd日aaaa”）</p></blockquote></li><li><p><code>=rand（）</code></p><blockquote><p>说明：随机生成（0,1）之间的数。</p></blockquote></li><li><p><code>=randbetween（min，max）</code></p><blockquote><p>说明：随机生成（min，max）之间的整数。</p></blockquote></li><li><p><code>=mid（提取值，字符串起点，字符串长度）</code></p><blockquote><p>说明：字符串提取。</p></blockquote></li><li><p><code>=text（mid（提取值，字符串起点，字符串长度），00-00-00）</code></p><blockquote><p>说明：从身份证号提取出生日期。</p></blockquote></li><li><p><code>=column（A2）</code></p><blockquote><p>说明：返回单元格所在列，<code>=column（A2）</code>返回值为1。</p></blockquote></li><li><p><code>=offset（参考系，行偏移量，列偏移量，返回的行数，返回的列数）</code></p><blockquote><p>返回的行数和列数，构成一个返回的区域。</p><p>（1）<code>=offset(A2,2,1,1,1)</code>，表示以A2单元格为参考系——行偏移量2行，列偏移量1行，返回1行1列的区域大小；参考系也可以是多行多列，要返回的行列数要与参考系行列数相同，（其实没必要多行多列引用，引用单个单元格，通过下拉的方式就可以实现多行多列引用。）。</p><p>（2）<code>offset(Sheet1!$A$2,1,,Sheet1!$D$2,1)</code>，表示以A2单元格为参照系——行偏移量1行，列不偏移——返回D2行，1列。可以通过此方式做带滚动轴的图表。</p></blockquote></li><li><p><code>=countifs(条件1范围，条件1，条件2范围，条件2……条件N范围，条件N)</code></p><blockquote><p>说明：多条件计数。</p></blockquote></li><li><p><code>=sumifs(求和范围，条件1范围，条件1，条件2范围，条件2……条件N范围，条件N)</code></p><blockquote><p>说明：多条件求和。</p></blockquote></li><li><p><code>=sumif(条件范围，条件，[求和范围])</code></p><blockquote><p>说明：单条件求和。</p></blockquote></li><li><p><code>=vlookup(查询值,查询区域,COLUMN(B3),0)</code></p><blockquote><p>说明：用于多列查询。</p></blockquote></li><li><p><code>=round（值或引用，保留小数个数）</code></p><blockquote><p>说明：确定小数保留的位数。</p></blockquote></li><li><p><code>=int（值或引用）</code></p><blockquote><p>说明：取整。</p></blockquote></li><li><p>=upper（字母或引用）</p><blockquote><p>说明：全部字母大写。</p></blockquote></li><li><p>=proper（字母或引用）</p><blockquote><p>首字母大写。</p></blockquote></li><li><p><code>=lower（字母或引用）</code></p><blockquote><p>说明：全部字母小写。</p></blockquote></li><li><p><code>=rank（排序的值，排序的范围，0/1）</code></p><blockquote><p>说明：排序，0为降序，1为升序，此为美式排序，如：1224557</p></blockquote></li><li><p><code>=sumproduct（数组1，数组2，...数组N）</code></p><blockquote><p>说明：数组用法不太明白，此为中式排序，如：1234567</p></blockquote></li><li><p><code>=counta（计数区域）</code></p><blockquote><p>说明：返回此区域非空单元格数量。</p></blockquote></li><li><p><code>=countblank（计数区域）</code></p><blockquote><p>说明：返回此区域空单元格数量。</p></blockquote></li><li><p><code>=rept（引用值，重复次数）</code></p><blockquote><p>说明：返回重复的引用值。</p></blockquote></li><li><p><code>=lookup（查询值，查询区域，返回值所在区域）</code></p><blockquote><p>说明：使用此函数必须对查询区域的值进行升序排列，否返回错误值。数组式查询不太明白。</p></blockquote></li><li><p><code>=numberstring（单元格值，1/2/3）</code></p><blockquote><p>说明：如66，当为1时六十六，当为2时，陆拾陆，当为3时，六六。</p></blockquote></li><li><p><code>=frequency（引用区域，&#123;up_value，low_value&#125;）</code></p><blockquote><p>说明：返回引用区域内，范围在low_value到up_value的个数。</p></blockquote></li><li><p><code>=aggrvate（函数，条件，引用区域）</code></p><blockquote><p>说明：用法略为复杂，参考网上用法。</p></blockquote></li><li><p><code>=isna(引用单元格)</code></p><blockquote><p>说明：如果引用的单元格为空，则返回True，否则返回False。注意和<code>isblank</code>的区别。</p></blockquote></li><li><p><code>=isblank(引用单元格)</code></p><blockquote><p>说明：如果引用的单元格没有值，则返回True，否则返回False。注意和<code>isna</code>的区别。</p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
