{"pages":[],"posts":[{"title":"Excel函数","text":"函数的使用： 注意格式的正确性。 注意引用区域的正确性，引用区域错误会导致返回的结果出错或函数报错。 注意相对引用和绝对引用的使用。 =vlookup（查询值，查询区域，查询区域的列，0/1） 说明：1为模糊匹配，0为精确匹配，省略时为模糊匹配。 =match（匹配值，匹配区域, 0） 说明：此函数以数值得形式返回匹配值所在位置，若匹配区域为某一列，则返回匹配值在此列的所在行数，若匹配区域为某一行，则返回匹配值在此列的所在列数。返回的行（列）位置为相对位置。 =vlookup（查询值，查询区域，match（匹配值，匹配区域，0），0） 说明：实现多条信息查询。 =count（计数区域） 说明：返回查询区域数值个数，若含有文字，文字部分则以0返回。 =ifs（判断条件1，返回值1，判断条件2，返回值2，...） 说明：多条件判断。 =countif（计数区域，计数条件） 说明：返回计数条件下的计数值。 ALT + = 说明：快速求和。 =text（要转换的值，格式） 说明：=text（a1，”yyyy年mm月dd日aaaa”或“e年mm月dd日aaaa”） =rand（） 说明：随机生成（0,1）之间的数。 =randbetween（min，max） 说明：随机生成（min，max）之间的整数。 =mid（提取值，字符串起点，字符串长度） 说明：字符串提取。 =text（mid（提取值，字符串起点，字符串长度），00-00-00） 说明：从身份证号提取出生日期。 =column（A2） 说明：返回单元格所在列，=column（A2）返回值为1。 =offset（参考系，行偏移量，列偏移量，返回的行数，返回的列数） 返回的行数和列数，构成一个返回的区域。 （1）=offset(A2,2,1,1,1)，表示以A2单元格为参考系——行偏移量2行，列偏移量1行，返回1行1列的区域大小；参考系也可以是多行多列，要返回的行列数要与参考系行列数相同，（其实没必要多行多列引用，引用单个单元格，通过下拉的方式就可以实现多行多列引用。）。 （2）offset(Sheet1!$A$2,1,,Sheet1!$D$2,1)，表示以A2单元格为参照系——行偏移量1行，列不偏移——返回D2行，1列。可以通过此方式做带滚动轴的图表。 =countifs(条件1范围，条件1，条件2范围，条件2……条件N范围，条件N) 说明：多条件计数。 =sumifs(求和范围，条件1范围，条件1，条件2范围，条件2……条件N范围，条件N) 说明：多条件求和。 =sumif(条件范围，条件，[求和范围]) 说明：单条件求和。 =vlookup(查询值,查询区域,COLUMN(B3),0) 说明：用于多列查询。 =round（值或引用，保留小数个数） 说明：确定小数保留的位数。 =int（值或引用） 说明：取整。 =upper（字母或引用） 说明：全部字母大写。 =proper（字母或引用） 首字母大写。 =lower（字母或引用） 说明：全部字母小写。 =rank（排序的值，排序的范围，0/1） 说明：排序，0为降序，1为升序，此为美式排序，如：1224557 =sumproduct（数组1，数组2，...数组N） 说明：数组用法不太明白，此为中式排序，如：1234567 =counta（计数区域） 说明：返回此区域非空单元格数量。 =countblank（计数区域） 说明：返回此区域空单元格数量。 =rept（引用值，重复次数） 说明：返回重复的引用值。 =lookup（查询值，查询区域，返回值所在区域） 说明：使用此函数必须对查询区域的值进行升序排列，否返回错误值。数组式查询不太明白。 =numberstring（单元格值，1/2/3） 说明：如66，当为1时六十六，当为2时，陆拾陆，当为3时，六六。 =frequency（引用区域，{up_value，low_value}） 说明：返回引用区域内，范围在low_value到up_value的个数。 =aggrvate（函数，条件，引用区域） 说明：用法略为复杂，参考网上用法。 =isna(引用单元格) 说明：如果引用的单元格为空，则返回True，否则返回False。注意和isblank的区别。 =isblank(引用单元格) 说明：如果引用的单元格没有值，则返回True，否则返回False。注意和isna的区别。","link":"/2020/04/04/Excel%E5%87%BD%E6%95%B0/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/08/29/hello-world/"},{"title":"Faker库的使用方法","text":"Faker库使用方法[TOC] 我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 Faker 来伪造数据从而用来测试. Faker 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。 安装Faker库已经被提交到 pip，可以通过 pip 工具直接安装。 1pip install Faker 使用官方文档 faker 提供了一个工厂函数，用来创建数据。 12&gt;&gt;&gt; from faker import Factory&gt;&gt;&gt; fake1 = Factory.create() 当然，也提供一个Faker类来创建实例 12345678&gt;&gt;&gt; from faker import Faker&gt;&gt;&gt; fake2 = Faker()&gt;&gt;&gt; fake2.name()'Audrey Robinson'&gt;&gt;&gt; fake2.address()'4266 Fritz Shore\\nLewischester, AL 24594-7593'&gt;&gt;&gt; fake2.text()'Odio porro unde sint aliquid beatae. Ex officiis porro nostrum laboriosam deleniti nisi. A aut molestiae ratione ipsam perspiciatis facere.\\nDicta incidunt at deleniti recusandae accusamus quisquam.' 每次调用方法 fake.name() 都会产生不同的（随机）结果。这是因为 faker 向 faker.Generator.method_name() 调用了 faker.Generator.format(method_name)。 本地化在用 Faker() 创建 faker 实例时，可以为实例指定本地化区域参数，默认为 ‘’n_US‘’因此生成的姓名、地址等都是美国的。要生成中文伪造数据，只需： 1&gt;&gt;&gt; fake = Faker(&quot;zh_CN&quot;) 方法介绍如上面例子，每次调用 fake 实例的 name()方法时，都会产生不同随机姓名。fake 实例还有很多方法可用，这些方法分为以下几类： address 地址 person 人物类：性别、姓名等 barcode 条码类 color 颜色类 company 公司类：公司名、公司email、公司名前缀等 credit_card 银行卡类：卡号、有效期、类型等 currency 货币 date_time 时间日期类：日期、年、月等 file 文件类：文件名、文件类型、文件扩展名等 internet 互联网类 job 工作 lorem 乱数假文 misc 杂项类 phone_number 手机号码类：手机号、运营商号段 python python数据 profile 人物描述信息：姓名、性别、地址、公司等 ssn 社会安全码(身份证号码) user_agent 用户代理 address 地址1234567891011121314151617&gt;&gt;&gt; fake.country() # 国家'奥地利' &gt;&gt;&gt; fake.city() # 城市'郑州市'&gt;&gt;&gt; fake.city_suffix() # 城市的后缀,中文是：市或县'市'&gt;&gt;&gt; fake.address() # 地址'河北省巢湖县怀柔南宁路f座 169812'&gt;&gt;&gt; fake.street_address() # 街道'邯郸路W座'&gt;&gt;&gt; fake.street_name() # 街道名'合肥路'&gt;&gt;&gt; fake.postcode() # 邮编'314548'&gt;&gt;&gt; fake.latitude() # 维度Decimal('68.0228435')&gt;&gt;&gt; fake.longitude() # 经度Decimal('155.964341') person 人物1234567891011121314&gt;&gt;&gt; fake.name() # 姓名'单玉珍'&gt;&gt;&gt; fake.last_name() # 姓'潘'&gt;&gt;&gt; fake.first_name() # 名'琴'&gt;&gt;&gt; fake.name_male() # 男性姓名'官平'&gt;&gt;&gt; fake.last_name_male() # 男性姓'安'&gt;&gt;&gt; fake.first_name_male() # 男性名'文'&gt;&gt;&gt; fake.name_female() # 女性姓名'许颖' barcode 条码123456&gt;&gt;&gt; fake.ean8() # 8位条码'12771363'&gt;&gt;&gt; fake.ean13() # 13位条码'9133134950963'&gt;&gt;&gt; fake.ean(length=8) # 自定义位数条码,只能选8或者13'20417161' color 颜色123456789101112&gt;&gt;&gt; fake.hex_color() # 16进制表示的颜色'#671f6d'&gt;&gt;&gt; fake.rgb_css_color() # css用的rgb色'rgb(237,74,237)'&gt;&gt;&gt; fake.rgb_color() # 表示rgb色的字符串'208,102,218'&gt;&gt;&gt; fake.color_name() # 颜色名字'Brown'&gt;&gt;&gt; fake.safe_hex_color() #安全16进制色'#ee4400'&gt;&gt;&gt; fake.safe_color_name() # 安全颜色名字'maroon' company 公司1234&gt;&gt;&gt; fake.company() # 公司名'时空盒数字科技有限公司'&gt;&gt;&gt; fake.company_suffix() # 公司名后缀'科技有限公司' credit_card 银行信用卡12345678910&gt;&gt;&gt; fake.credit_card_number(card_type=None) # 卡号'375325478746231'&gt;&gt;&gt; fake.credit_card_provider(card_type=None) # 卡的提供者'VISA 13 digit'&gt;&gt;&gt; fake.credit_card_security_code(card_type=None) # 卡的安全密码'450'&gt;&gt;&gt; fake.credit_card_expire() # 卡的有效期'04/22'&gt;&gt;&gt; fake.credit_card_full(card_type=None) # 完整卡信息'Maestro\\n秀芳 商\\n502001016117 04/27\\nCVV: 144\\n' currency 货币12&gt;&gt;&gt; fake.currency_code() # 货币代码'HNL' date_time 时间日期1234567891011121314151617181920212223242526272829303132333435363738394041424344&gt;&gt;&gt; fake.date_time(tzinfo=None) # 随机日期时间datetime.datetime(2001, 3, 18, 17, 57, 44)&gt;&gt;&gt; fake.iso8601(tzinfo=None) # 以iso8601标准输出的日期'1973-11-16T22:58:37' &gt;&gt;&gt; fake.date_time_this_month(before_now=True, after_now=False, tzinfo=None) # 本月的某个日期datetime.datetime(2017, 11, 1, 14, 33, 48)&gt;&gt;&gt; fake.date_time_this_year(before_now=True, after_now=False, tzinfo=None) # 本年的某个日期datetime.datetime(2017, 3, 2, 13, 55, 31)&gt;&gt;&gt; fake.date_time_this_decade(before_now=True, after_now=False, tzinfo=None) # 本年代内的一个日期datetime.datetime(2010, 3, 26, 6, 33, 23)&gt;&gt;&gt; fake.date_time_this_century(before_now=True, after_now=False, tzinfo=None) # 本世纪一个日期datetime.datetime(2015, 7, 21, 19, 27, 53)&gt;&gt;&gt; fake.date_time_between(start_date=&quot;-30y&quot;, end_date=&quot;now&quot;, tzinfo=None) # 两个时间间的一个随机时间datetime.datetime(2005, 12, 3, 17, 17, 15) &gt;&gt;&gt; fake.timezone() # 时区'America/Guatemala'&gt;&gt;&gt; fake.time(pattern=&quot;%H:%M:%S&quot;) # 时间（可自定义格式）'11:21:52'&gt;&gt;&gt; fake.am_pm() # 随机上午下午'PM'&gt;&gt;&gt; fake.month() # 随机月份'02'&gt;&gt;&gt; fake.month_name() # 随机月份名字'August'&gt;&gt;&gt; fake.year() # 随机年'1974'&gt;&gt;&gt; fake.day_of_week() # 随机星期几'Sunday'&gt;&gt;&gt; fake.day_of_month() # 随机月中某一天'02'&gt;&gt;&gt; fake.time_delta() # 随机时间延迟datetime.timedelta(13371, 27637)&gt;&gt;&gt; fake.date_object() # 随机日期对象datetime.date(1983, 1, 26)&gt;&gt;&gt; fake.time_object() # 随机时间对象datetime.time(17, 8, 56)&gt;&gt;&gt; fake.unix_time() # 随机unix时间（时间戳）1223246848&gt;&gt;&gt; fake.date(pattern=&quot;%Y-%m-%d&quot;) # 随机日期（可自定义格式）'1984-04-20'&gt;&gt;&gt; fake.date_time_ad(tzinfo=None) # 公元后随机日期datetime.datetime(341, 9, 11, 8, 6, 9) file 文件12345678&gt;&gt;&gt; fake.file_name(category=&quot;image&quot;, extension=&quot;png&quot;) # 文件名（指定文件类型和后缀名）'增加.png'&gt;&gt;&gt; fake.file_name() # 随机生成各类型文件'提供.pdf'&gt;&gt;&gt; fake.file_extension(category=None) # 文件后缀'txt'&gt;&gt;&gt; fake.mime_type(category=None) # mime-type'image/png' internet 互联网12345678910111213141516171819202122232425262728293031323334&gt;&gt;&gt; fake.ipv4(network=False) # ipv4地址'104.225.105.10'&gt;&gt;&gt; fake.ipv6(network=False) # ipv6地址'dea6:ca11:39d0:b49f:fff1:82f1:bf88:698b'&gt;&gt;&gt; fake.uri_path(deep=None) # uri路径'search/categories'&gt;&gt;&gt; fake.uri_extension() # uri扩展名'.htm'&gt;&gt;&gt; fake.uri() # uri'https://www.wei.com/terms/'&gt;&gt;&gt; fake.url() # url'http://zheng.org/'&gt;&gt;&gt; fake.image_url(width=None, height=None) # 图片url'https://www.lorempixel.com/700/990'&gt;&gt;&gt; fake.domain_word() # 域名主体'hu'&gt;&gt;&gt; fake.domain_name() # 域名'hu.cn'&gt;&gt;&gt; fake.tld() # 域名后缀'com'&gt;&gt;&gt; fake.user_name() # 用户名'xia13'&gt;&gt;&gt; fake.user_agent() # UA'Opera/8.33.(Windows NT 5.1; an-ES) Presto/2.9.171 Version/10.00'&gt;&gt;&gt; fake.mac_address() # MAC地址'd6:38:cc:2a:76:b2'&gt;&gt;&gt; fake.safe_email() # 安全邮箱'mingli@example.net'&gt;&gt;&gt; fake.free_email() # 免费邮箱'tao44@gmail.com'&gt;&gt;&gt; fake.company_email() # 公司邮箱'jingzhong@wang.cn'&gt;&gt;&gt; fake.email() # 邮箱'changjun@hao.com' job 工作1234&gt;&gt;&gt; fake.job()#工作职位'Dealer'&gt;&gt;&gt; fake.job()'Musician' lorem 乱数假文12345678910111213141516&gt;&gt;&gt; fake.text(max_nb_chars=200) # 随机生成一篇文章'语言无法应用为什一点国内.要求完成如何世界电脑发布作品.经济不同教育个人科技全国.\\n在线学生发布信息上海状态.\\n联系一次通过其实介绍世界.增加也是使用成功那个.\\n商品免费管理公司.留言自己这种内容.\\n次数内容知道这样女人感觉.操作他的生产出现如何报告文章只有.\\n个人文化中心不能发布最新.质量一下提高.感觉最大工具表示最后计划.这是还有次数结果其实特别.' &gt;&gt;&gt; fake.word() # 随机单词'能力'&gt;&gt;&gt; fake.words(nb=3) # 随机生成几个字['国家', '经营', '结果']&gt;&gt;&gt; fake.sentence(nb_words=6, variable_nb_words=True) # 随机生成一个句子'重要更多我们作品地方增加.'&gt;&gt;&gt; fake.sentences(nb=3) # 随机生成几个句子['制作上海学生.', '方式汽车一样技术帮助欢迎.', '说明一种深圳经营电话帖子.']&gt;&gt;&gt; fake.paragraph(nb_sentences=3, variable_nb_sentences=True) # 随机生成一段文字(字符串)'非常环境位置有限发展首页行业.情况对于出现部门这种觉得.产品以后因为虽然由于日本不同.' &gt;&gt;&gt; fake.paragraphs(nb=3) # 随机生成成几段文字(列表)['就是发布要求有关这里国际.美国设备深圳经营.首页也是支持报告.', '决定可是只有发现开始一直.最后有些项目正在深圳关系决定.下载注册图片更多进行他的那些.', '必须他们发生数据准备联系.同时这样内容学校精华.'] misc 杂项1234567891011121314151617181920212223242526272829&gt;&gt;&gt; fake.binary(length=10) # 随机二进制字符串(可指定长度)b'U\\xa9@\\x1e\\x96\\xe7\\xca\\x82\\x14f' &gt;&gt;&gt; fake.language_code() # 随机语言代码'tg'&gt;&gt;&gt; fake.md5(raw_output=False) # 随机md5，16进制字符串'cc4feebe419791332bbcff5e0fdf084a' &gt;&gt;&gt; fake.sha1(raw_output=False) # 随机sha1，16进制字符串'8ac0e9980f880860b6e45ae6fd257cc847b7ae8d' &gt;&gt;&gt; fake.sha256(raw_output=False) # 随机sha256，16进制字符串'033151f173f4a389e38e7df2363d89741f752c474e7bdfa2ee0a794bf0b505b5' &gt;&gt;&gt; fake.boolean(chance_of_getting_true=50) # 随机真假值(得到True的几率是50%)False &gt;&gt;&gt; fake.null_boolean() # 随机真假值和null&gt;&gt;&gt; fake.null_boolean()True &gt;&gt;&gt; fake.password(length=10, special_chars=True, digits=True, upper_case=True, lower_case=True) # 随机密码（可指定密码策略）'F%722TJg_U'&gt;&gt;&gt; fake.locale() # 随机本地代码'hy_AM'&gt;&gt;&gt; fake.uuid4() # 随机uuid'a50d17e7-bc4f-37a3-27b3-04a24fdd0055'&gt;&gt;&gt; phone_number 电话号码1234&gt;&gt;&gt; fake.phone_number() # 手机号码'13334603608'&gt;&gt;&gt; fake.phonenumber_prefix() # 运营商号段，手机号码前三位158 python python数据12345678910111213141516171819202122232425262728&gt;&gt;&gt; fake.pyint() # 随机int7775&gt;&gt;&gt; fake.pyfloat(left_digits=None, right_digits=None, positive=False) # 浮点数-84901.5586333&gt;&gt;&gt; fake.pydecimal(left_digits=None, right_digits=None, positive=False) # 随机高精度数Decimal('-12273687068527.0')&gt;&gt;&gt; fake.pystr(min_chars=None, max_chars=20) # 随机字符串（可指定长度）'cblutNKFIyegfcHPrjzx'&gt;&gt;&gt; fake.pybool() # 随机bool值True &gt;&gt;&gt; fake.pyiterable(nb_elements=10, variable_nb_elements=True) # 随机iterable['ODfeVvcbAjPDBGwzljQw', 'https://www.tan.cn/list/category/homepage.php', 'YQlrsFkBieyKYaXlCljJ', Decimal('42778240911787.2'), Decimal('957411812.6383'), 'TGbqZufoiUXLQTZDrVcP', 'http://yan.com/posts/tags/search/terms.php', 3.680492634254, 'min57@hotmail.com', datetime.datetime(2001, 8, 16, 6, 10, 49), 'xMMOjlETIgKGqVGTrChG', 'yong83@xu.cn'] &gt;&gt;&gt; fake.pylist(nb_elements=10, variable_nb_elements=True ) # 随机生成一个list['KXQMXAkcEMSLfnIZkgJb', 'BtowiRsuIqyyULnSYYdr', datetime.datetime(2011, 10, 10, 14, 44, 2), datetime.datetime(2008, 5, 10, 1, 38, 38), 'juan47@hotmail.com', 'QEsdUpEqHLpThyWCjkNx', Decimal('-801375867.9'), 'ucDyeZnHAXfZtkwdVUbR', 4707, datetime.datetime(1974, 8, 7, 1, 54, 29)] &gt;&gt;&gt; fake.pydict(nb_elements=10, variable_nb_elements=True) # 随机字典{'其中': 9047, '一直': 'AUiUjuqccIdVAWSqzDbW', '选择': 'ddong@hotmail.com', '开发': datetime.datetime(1972, 10, 20, 14, 14, 9), '电影': 'KYmolBhkjSRxloXXFUUT', '文化': 2681, '这里': 'uyang@yahoo.com', '不会': 'ZPkwuxWsrJSHMNuFiWEx', '社会': 'CiujeaZMZSuyYwuKzEdN'} &gt;&gt;&gt; fake.pyset(nb_elements=10, variable_nb_elements=True) # 随机set{'bhe@hotmail.com', 'http://fu.cn/list/home.htm', 'MlJluVirRkofBnKNtphM', 296, 'ghoUSHkuEGmCzlJFKyHZ', datetime.datetime(2008, 4, 4, 2, 55, 4), 'AgbynHjdvwYpUkbMsfqr', 8751, 9649, 'tangguiying@hotmail.com', Decimal('5727570036.91'), 'HmDkExndcQIOaTtsSpsc', 'hjQlLLXuHVVzENEwoHJK'} &gt;&gt;&gt; fake.pytuple(nb_elements=10, variable_nb_elements=True) # 随机tuple('http://www.cai.com/index/', datetime.datetime(1973, 7, 28, 2, 12, 23), 'khltJQMYJvIDRMYodviZ', 'uJezUsEqiHaiFxwOPWvl', 'qojwZHyytBSQQavkDaTu', 'AHUCHYuVJTHnoSEuQDSY', 1012, 'uEYVuzeTlgVhrnCATfKw', 'https://www.zhou.com/categories/tags/main/', 'LbLSFZPeATtzHvbmYhGr') &gt;&gt;&gt; fake.pystruct() # 随机生成3个有10个元素的python数据结构([datetime.datetime(1996, 10, 26, 7, 35, 26), datetime.datetime(1998, 2, 28, 17, 20, 8), 'qianming@hotmail.com', 'yEWMrpTqtAHfbxqldGrb', 'YgKYOnrjuthOrOXhlYIl', datetime.datetime(1994, 12, 10, 0, 55, 30), Decimal('-6865068.3'), 'SYHFHiFvJlRVPcCKumUM', -8619.4354, 'kwGipwcASeALLeKdaWBi'], {'同时': 'BvtYdkNTHwZNMiIIRwKd', '空间': 310959668662.457, '特别': 'PZQDBuuQWkcdryMloyKS', '音乐': Decimal('-7219015925.0'), '项目': 'https://www.zhou.cn/main.php', '回复': 30.408750841, '显示': 'etZMrsjXJgZpDfZWhpoS', '大小': 7472, '类型': 'OsjpxgLqnTcdVOlHoMoP', '什么': 'http://www.xia.com/posts/app/index/'}, {'朋友': {0: -415025.243093017, 1: [1799, 585, 'shu@hotmail.com'], 2: {0: 9980, 1: 'qnOnFTzGnsjvXGybBnMF', 2: ['http://zheng.cn/list/search/tag/faq.html', Decimal('964285276661463.0')]}}, '发生': {1: -5339010.6134, 2: [datetime.datetime(1987, 6, 23, 15, 21, 45), 'SvSpvKqTXlJvdQhHScwM', 'PZjKOYzZzoNVsHLRcARQ'], 3: {1: 'https://www.yan.cn/register/', 2: 2191, 3: ['HMHKQuLRBQaaAypRbtHU', datetime.datetime(2014, 5, 24, 3, 32, 36)]}}, '我的': {2: 'linxia@yahoo.com', 3: ['http://gu.com/about.php', 'DhzpWYkgLCobGSHDLXzI', 1420], 4: {2: datetime.datetime(1986, 2, 22, 4, 50, 12), 3: 'rRHwQQzkpAMBQxwVITBa', 4: [datetime.datetime(1984, 2, 6, 11, 52, 18), -73821572962388.7]}}, '全部': {3: 'uMQeeBXYNGhrHnAerdjp', 4: [323329.56403, 'kFvqXFhhtQPNtrOjKtxa', 'http://peng.cn/'], 5: {3: 'lcaoeisYIAOsuRjbOXia', 4: Decimal('-902407032449085.0'), 5: [2296, 'uyuWgnsONzLluXqXdASM']}}, '大小': {4: 'min63@hotmail.com', 5: [datetime.datetime(1991, 10, 22, 19, 21, 48), 'cDYEScdIokWuvGhRkWqs', 'XeDJojWyywFvzmWYaokO'], 6: {4: Decimal('-4167029.2915827'), 5: 4030, 6: [6372, 'xfRXXEFGsNQpeIGmbaHU']}}, '语言': {5: 'https://www.guo.cn/', 6: [6498, datetime.datetime(1981, 12, 3, 18, 4, 29), 42598100345.61], 7: {5: 'http://zheng.cn/', 6: -229316.268238, 7: ['https://www.qiao.cn/home/', 'GtaEXeVxjRnnkggjEguv']}}, '表示': {6: 'xcBvcGUWxdMhDqgzmhSd', 7: ['kwDaFhyTKqHajGSaNOMf', 8561, 5456], 8: {6: 'https://zhou.cn/tags/tag/faq.html', 7: 'IGayAZtTQVlSOasQwgug', 8: ['iCjwBzHfmPSLqAgmIOle', 70511766106574.5]}}, '电子': {7: 'http://www.lu.org/tags/posts/terms/', 8: [datetime.datetime(1978, 8, 11, 12, 16, 35), 'https://song.cn/main/categories/homepage.html', 'https://long.com/register.html'], 9: {7: 'nFJNhyMYBvfTxrYwYPUQ', 8: -2252757903.0, 9: ['GuJnhMEgXoMAivrgGZie', datetime.datetime(2014, 5, 29, 1, 17, 50)]}}, '的人': {8: 'WgHePwYSPgSiPllXpLlJ', 9: [1782, 'fSepbXwpvhiBphzDTDNC', -9117731.63459416], 10: {8: 5602, 9: 3664, 10: ['http://www.mao.com/search/tag/main/', Decimal('5579.7377')]}}, '不过': {9: 'rOfkDPTHvzKbfvQHbPNm', 10: [314.397, 'StqeLyXkIDKHfExSjggk', 'xiuyingkang@gao.cn'], 11: {9: 'BLKNdcccamYzBwRcMxlx', 10: 'yongduan@gong.org', 11: ['ZocoQHdbhaNloWALnzwt', 'eWVvvHurAlZZRxlYHZXi']}}}) profile 人物描述信息123456789101112&gt;&gt;&gt; fake.profile(fields=None, sex=None) # 人物描述信息：姓名、性别、地址、公司等{'job': 'Licensed conveyancer', 'company': '万迅电脑信息有限公司', 'ssn': '370684199902182726', 'residence': '福建省小红市南长广州街K座 406448', 'current_location': (Decimal('18.050895'), Decimal('-0.877117')), 'blood_group': '0-', 'website': ['https://www.yi.org/', 'https://www.hu.com/', 'https://www.yin.cn/'], 'username': 'minghuang', 'name': '后英', 'sex': 'F', 'address': '安徽省秀荣市璧山嘉禾路T座 954960', 'mail': 'czhong@hotmail.com', 'birthdate': '1975-03-09'}&gt;&gt;&gt; s = fake.simple_profile(sex=&quot;m&quot;) # 人物精简信息&gt;&gt;&gt; for i,v in s.items():... print(i,v)...username chao85name 邴宇sex Maddress 陕西省东市朝阳廖街Y座 757661mail xiazhang@gmail.combirthdate 1996-09-20 ssn 社会安全码(身份证)1234&gt;&gt;&gt; fake.ssn() # 随机生成身份证号(18位)'140100196612297997'&gt;&gt;&gt; len(fake.ssn())18 user_agent 用户代理常用在伪造浏览器信息 12&gt;&gt;&gt; fake.user_agent() # 伪造UA'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5361 (KHTML, like Gecko) Chrome/15.0.812.0 Safari/5361' 平台信息伪造 12345678910&gt;&gt;&gt; fake.linux_platform_token()'X11; Linux i686'&gt;&gt;&gt; fake.linux_processor()'i686'&gt;&gt;&gt; fake.windows_platform_token()'Windows CE'&gt;&gt;&gt; fake.mac_platform_token()'Macintosh; Intel Mac OS X 10_7_4'&gt;&gt;&gt; fake.mac_processor()'PPC' 浏览器伪造 12345678910&gt;&gt;&gt; fake.internet_explorer() # IE浏览器'Mozilla/5.0 (compatible; MSIE 5.0; Windows NT 6.1; Trident/4.0)'&gt;&gt;&gt; fake.opera() # opera浏览器'Opera/9.37.(Windows 95; doi-IN) Presto/2.9.178 Version/10.00'&gt;&gt;&gt; fake.firefox() # firefox浏览器'Mozilla/5.0 (Windows NT 5.0; te-IN; rv:1.9.2.20) Gecko/2015-09-28 13:29:05 Firefox/12.0'&gt;&gt;&gt; fake.safari() # safari浏览器'Mozilla/5.0 (Windows; U; Windows NT 4.0) AppleWebKit/533.37.4 (KHTML, like Gecko) Version/5.0 Safari/533.37.4'&gt;&gt;&gt; fake.chrome() # chrome浏览器'Mozilla/5.0 (Windows 98; Win 9x 4.90) AppleWebKit/5361 (KHTML, like Gecko) Chrome/14.0.866.0 Safari/5361' 自定义扩展Faker 已经提供了足够丰富的信息生成，包括名字、手机号、邮箱地址、邮编等等。尽管如此，可能还是没有办法满足你的需求。这时，可以利用自定义扩展，引用外部的 provider，自定义你要的功能。 Faker 对象可以通过 add_provider 方法将自定义的 Provider 添加到对象中,自定义的 Provider 需要继承自 BaseProvider。 12345678910111213141516from faker import Fakerfake = Faker() # first, import a similar Provider or use the default onefrom faker.providers import BaseProvider # create new provider classclass MyProvider(BaseProvider): def foo(self): return 'bar' # then add new provider to faker instancefake.add_provider(MyProvider) # now you can use:print(fake.foo()) 结果显示： 1bar 随机控制Faker 随机生成由 random.Random 驱动。其中，.random 属性返回 random.Random 对象。通过对该对象的操作，可以实现自定义的行为。 1234from faker import Fakerfake = Faker()fake.randomfake.random.getstate() 那么，可以实现什么自定义呢？举个例子，我们可以设置 seed，通过给定的 seed 可以控制每次生成的内容都是一样的。 123456789101112&gt;&gt;&gt; from faker import Faker&gt;&gt;&gt; fake = Faker()&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008'&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008'xxxxxxxxxx &gt;&gt;&gt; from faker import Faker&gt;&gt;&gt; fake = Faker()&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; &gt;&gt;&gt; from faker import Faker&gt;&gt;&gt; fake = Faker()&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008'&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008'fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008'&gt;&gt;&gt; fake.random.seed(4321)&gt;&gt;&gt; fake.name()'Ryan Gallagher'&gt;&gt;&gt; fake.address()'7631 Johnson Village Suite 690\\nAdamsbury, NC 50008' 不同的两次运行，只要seed一样，生成出来的信息就是一样的。 注意：fake.random.seed(4321) 可以写成 fake.seed(4321) 。 命令行生成有时想在shell或者其他程序中生成一些伪数据，是不是一定要写一个Python脚本呢？别急——Faker提供了一个命令行工具，估计可以应对大部分场景了： 12345678910111213141516171819$ faker address968 Bahringer Garden Apt. 722Kristinaland, NJ 09890 $ python3 -m faker address432 Marvin Wells Apt. 593\\nWest Eric, DC 45650-8420 $ faker -l de_DE addressSamira-Niemeier-Allee 5694812 Biedenkopf $ faker profile{'job': 'Designer, blown glass/stained glass', 'company': 'Dennis-Bowers', 'ssn': '034-28-9965', 'residence': '34796 Jeremiah Station Apt. 782\\nWest Timothy, TX 24139-6974', 'current_location': (Decimal('-47.425017'), Decimal('-42.743615')), 'blood_group': '0+', 'website': ['https://www.gardner.biz/', 'http://glover-ellison.info/', 'http://www.harrison.biz/'], 'username': 'patrick33', 'name': 'Alexandra Montgomery', 'sex': 'F', 'address': '2314 Collier Stream Suite 093\\nMcintyreside, UT 19553', 'mail': 'gomezterri@hotmail.com', 'birthdate': '2005-01-30'} $ faker profile ssn,name{'ssn': '344-68-7420', 'name': 'Veronica Brennan'} $ faker -r=3 -s=&quot;;&quot; nameWillam Kertzmann;Josiah Maggio;Gayla Schmitt; faker 命令帮助： 12345faker [-h] [--version] [-o output] [-l {bg_BG,cs_CZ,...,zh_CN,zh_TW}] [-r REPEAT] [-s SEP] [-i {module.containing.custom_provider othermodule.containing.custom_provider}] [fake] [fake argument [fake argument ...]] 选项说明： faker ： 在shell中，faker 命令也可以用 python -m faker 来代替 -h，--help ： 帮助信息 --version ：显示版本 -o FILENAM ：输出结果到文件中 -l {bg_BG,cs_CZ,...,zh_CN,zh_TW} ：指定本地化，zh_CN 表示中文 -r REPEAT ：指定生成多少条相同类型的数据 -s SEP ：在每个输出后边添加指定的分隔符 -i {my.custom_provider other.custom_provider} ：自定义扩展，prividers列表。注意，这里要指定包含你 provider 类的模块的路径，而不是程序本身。 fake ：指定方法名称，如：name , address , text 等 [fake argument ...] ：为方法指定参数。如上例，为 profile 方法指定 ssn 和 name 参数，只输出这两个类型的内容。","link":"/2020/08/29/Faker%E5%BA%93%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"}],"tags":[],"categories":[]}